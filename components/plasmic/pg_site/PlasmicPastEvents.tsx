// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oATn9WrAqtDeaLtJDt8hxD
// Component: CdxWCDdqQWW3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: zoXit50v16ZA/component
import Card from "../../Card"; // plasmic-import: at931Xm9Xbfa/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pg_site.module.css"; // plasmic-import: oATn9WrAqtDeaLtJDt8hxD/projectcss
import sty from "./PlasmicPastEvents.module.css"; // plasmic-import: CdxWCDdqQWW3/css

createPlasmicElementProxy;

export type PlasmicPastEvents__VariantMembers = {};
export type PlasmicPastEvents__VariantsArgs = {};
type VariantPropType = keyof PlasmicPastEvents__VariantsArgs;
export const PlasmicPastEvents__VariantProps = new Array<VariantPropType>();

export type PlasmicPastEvents__ArgsType = {};
type ArgPropType = keyof PlasmicPastEvents__ArgsType;
export const PlasmicPastEvents__ArgProps = new Array<ArgPropType>();

export type PlasmicPastEvents__OverridesType = {
  postGenrePastEvents?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  allArtists?: p.Flex<typeof Card>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultPastEventsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPastEvents__RenderFunc(props: {
  variants: PlasmicPastEvents__VariantsArgs;
  args: PlasmicPastEvents__ArgsType;
  overrides: PlasmicPastEvents__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    events: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "4423ec1e-ef1e-455f-88e3-ebae366c58c4",
        userArgs: {},
        cacheKey: `plasmic.$.4423ec1e-ef1e-455f-88e3-ebae366c58c4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPastEvents.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPastEvents.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPastEvents.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"postGenrePastEvents"}
          data-plasmic-override={overrides.postGenrePastEvents}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.postGenrePastEvents
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__eWmLj)}
            displayHeight={"auto"}
            displayMaxHeight={"300px"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/pg_site/images/screenshot20231027At32308PMpng.png",
              fullWidth: 1155,
              fullHeight: 746,
              aspectRatio: undefined
            }}
          />

          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__swAts
            )}
          >
            {"PAST EVENTS"}
          </h1>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.events.data
                  .filter(event => new Date(event.Date) < new Date())
                  .sort((a, b) => new Date(b.Date) - new Date(a.Date));
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Card
                data-plasmic-name={"allArtists"}
                data-plasmic-override={overrides.allArtists}
                className={classNames("__wab_instance", sty.allArtists)}
                key={currentIndex}
                noTitle={true}
                title={"Card title"}
              >
                <p.PlasmicLink
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  href={(() => {
                    try {
                      return "/events/" + currentItem.slug;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return "/" + currentItem.slug;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4PPs5)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__kvjds)}
                      displayHeight={"auto"}
                      displayMaxHeight={"90px"}
                      displayMaxWidth={"35%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"200px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return currentItem.Photo[0].url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__svEGk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tHgW
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.EventName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "something here";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8JuDx
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem["Location Name"];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "something here";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cmOq7
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const date = new Date(currentItem.Date);
                                const options = {
                                  hour: "numeric",
                                  minute: "numeric",
                                  weekday: "long",
                                  month: "short",
                                  day: "numeric",
                                  year: "2-digit"
                                };
                                const formattedDate = date.toLocaleDateString(
                                  "en-US",
                                  options
                                );
                                return formattedDate.replace(",", "");
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "something here";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                </p.PlasmicLink>
              </Card>
            );
          })}
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1___8EjW
            )}
            onClick={async event => {
              const $steps = {};

              $steps["goToPastEvents"] = true
                ? (() => {
                    const actionArgs = { destination: `/past-events` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPastEvents"] != null &&
                typeof $steps["goToPastEvents"] === "object" &&
                typeof $steps["goToPastEvents"].then === "function"
              ) {
                $steps["goToPastEvents"] = await $steps["goToPastEvents"];
              }
            }}
          >
            {"UPCOMING EVENTS >"}
          </h1>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  postGenrePastEvents: ["postGenrePastEvents", "navBar", "allArtists", "link"],
  navBar: ["navBar"],
  allArtists: ["allArtists", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  postGenrePastEvents: "div";
  navBar: typeof NavBar;
  allArtists: typeof Card;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPastEvents__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPastEvents__VariantsArgs;
    args?: PlasmicPastEvents__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPastEvents__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPastEvents__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPastEvents__ArgProps,
          internalVariantPropNames: PlasmicPastEvents__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPastEvents__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "postGenrePastEvents") {
    func.displayName = "PlasmicPastEvents";
  } else {
    func.displayName = `PlasmicPastEvents.${nodeName}`;
  }
  return func;
}

export const PlasmicPastEvents = Object.assign(
  // Top-level PlasmicPastEvents renders the root element
  makeNodeComponent("postGenrePastEvents"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    allArtists: makeNodeComponent("allArtists"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicPastEvents
    internalVariantProps: PlasmicPastEvents__VariantProps,
    internalArgProps: PlasmicPastEvents__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "POST GENRE - PAST EVENTS",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPastEvents;
/* prettier-ignore-end */
