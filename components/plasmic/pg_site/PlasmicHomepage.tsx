// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oATn9WrAqtDeaLtJDt8hxD
// Component: tlpzCrm3llBR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: zoXit50v16ZA/component
import Card from "../../Card"; // plasmic-import: at931Xm9Xbfa/component
import Footer2 from "../../Footer2"; // plasmic-import: DUd-yxFV_3vR/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantst9JqZjUtfPcp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: t9JQZjUtfPcp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pg_site.module.css"; // plasmic-import: oATn9WrAqtDeaLtJDt8hxD/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: tlpzCrm3llBR/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  postGenre?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  mainPage?: p.Flex<"section">;
  upcomingEvents?: p.Flex<"section">;
  allArtists?: p.Flex<typeof Card>;
  figmaPaste?: p.Flex<"div">;
  rectangle38929?: p.Flex<"a"> & Partial<LinkProps>;
  pitterPatter9FiftySevenSouthsiders?: p.Flex<"div">;
  locationFriday112023?: p.Flex<"div">;
  rectangle38930?: p.Flex<"div">;
  atwoodChurchSaturday020324Time700Pm?: p.Flex<"a"> & Partial<LinkProps>;
  rectangle38931?: p.Flex<"a"> & Partial<LinkProps>;
  rectangle38955?: p.Flex<"a"> & Partial<LinkProps>;
  atwoodChurchFriday021724Time700Pm?: p.Flex<"a"> & Partial<LinkProps>;
  rectangle38956?: p.Flex<"a"> & Partial<LinkProps>;
  rectangle38957?: p.Flex<"a"> & Partial<LinkProps>;
  atwoodChurchFriday030124Time700Pm?: p.Flex<"a"> & Partial<LinkProps>;
  rectangle38958?: p.Flex<"a"> & Partial<LinkProps>;
  whatis?: p.Flex<"section">;
  figmaPaste2?: p.Flex<"div">;
  rectangle38940?: p.Flex<"div">;
  rectangle38941?: p.Flex<"div">;
  rectangle38942?: p.Flex<"div">;
  section?: p.Flex<"section">;
  figmaPaste3?: p.Flex<"div">;
  rectangle38944?: p.Flex<"div">;
  rectangle38945?: p.Flex<"div">;
  footer2?: p.Flex<typeof Footer2>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "ee49fade-79f9-4ff9-ad34-1a8ed94b90f9",
        userArgs: {},
        cacheKey: `plasmic.$.ee49fade-79f9-4ff9-ad34-1a8ed94b90f9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    events: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "4423ec1e-ef1e-455f-88e3-ebae366c58c4",
        userArgs: {},
        cacheKey: `plasmic.$.4423ec1e-ef1e-455f-88e3-ebae366c58c4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    site: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "d0e69f30-cffc-49d6-8f61-a6c259079ca8",
        userArgs: {},
        cacheKey: `plasmic.$.d0e69f30-cffc-49d6-8f61-a6c259079ca8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantst9JqZjUtfPcp()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"postGenre"}
          data-plasmic-override={overrides.postGenre}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.postGenre
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <section
            data-plasmic-name={"mainPage"}
            data-plasmic-override={overrides.mainPage}
            className={classNames(projectcss.all, sty.mainPage)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__mzptP)}
              displayHeight={"70vh"}
              displayMaxHeight={"70vh"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/pg_site/images/screenshot20231025At41716PMpng.png",
                fullWidth: 974,
                fullHeight: 1162,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__shQh3
              )}
            >
              {"LIVE FROM OAKLAND:\nSERIES 2 \nTickets Available Now!"}
            </div>
          </section>
          <section
            data-plasmic-name={"upcomingEvents"}
            data-plasmic-override={overrides.upcomingEvents}
            className={classNames(projectcss.all, sty.upcomingEvents)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__wTiqA)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.events.data
                      .filter(event => new Date(event.Date) > new Date())
                      .sort((a, b) => new Date(a.Date) - new Date(b.Date));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Card
                    data-plasmic-name={"allArtists"}
                    data-plasmic-override={overrides.allArtists}
                    className={classNames("__wab_instance", sty.allArtists)}
                    key={currentIndex}
                    noTitle={true}
                    title={"Card title"}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__yfvQn
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return "/events/" + currentItem.slug;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return "/" + currentItem.slug;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__g8Dgx
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__gdke)}
                          displayHeight={"auto"}
                          displayMaxHeight={"90px"}
                          displayMaxWidth={"35%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"200px"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return currentItem.Photo[0].url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vpqZt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uWcUm
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.EventName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "something here";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zmLpO
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem["Location Name"];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "something here";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gMwK
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const date = new Date(currentItem.Date);
                                    const options = {
                                      hour: "numeric",
                                      minute: "numeric",
                                      weekday: "long",
                                      month: "short",
                                      day: "numeric",
                                      year: "2-digit"
                                    };
                                    const formattedDate =
                                      date.toLocaleDateString("en-US", options);
                                    return formattedDate.replace(",", "");
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "something here";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    </p.PlasmicLink>
                  </Card>
                );
              })}
              <div
                data-plasmic-name={"figmaPaste"}
                data-plasmic-override={overrides.figmaPaste}
                className={classNames(projectcss.all, sty.figmaPaste)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__giFr5
                  )}
                >
                  {"Live From Oakland: Series 2"}
                </div>
                <p.PlasmicLink
                  data-plasmic-name={"rectangle38929"}
                  data-plasmic-override={overrides.rectangle38929}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.rectangle38929
                  )}
                  component={Link}
                  href={"/genesis1"}
                  platform={"nextjs"}
                />

                <div
                  data-plasmic-name={"pitterPatter9FiftySevenSouthsiders"}
                  data-plasmic-override={
                    overrides.pitterPatter9FiftySevenSouthsiders
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.pitterPatter9FiftySevenSouthsiders
                  )}
                >
                  {"Pitter Patter, 9FiftySeven, \nSouthsiders "}
                </div>
                <div
                  data-plasmic-name={"locationFriday112023"}
                  data-plasmic-override={overrides.locationFriday112023}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.locationFriday112023
                  )}
                >
                  {"location\nFriday 11/20/23 \n"}
                </div>
                <div
                  data-plasmic-name={"rectangle38930"}
                  data-plasmic-override={overrides.rectangle38930}
                  className={classNames(projectcss.all, sty.rectangle38930)}
                />

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__wyYiH
                  )}
                  component={Link}
                  href={"/genesis1"}
                  platform={"nextjs"}
                >
                  {"Heading North, Claycoast,\n9Fiftyseven"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  data-plasmic-name={"atwoodChurchSaturday020324Time700Pm"}
                  data-plasmic-override={
                    overrides.atwoodChurchSaturday020324Time700Pm
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.atwoodChurchSaturday020324Time700Pm
                  )}
                  component={Link}
                  href={"/genesis1"}
                  platform={"nextjs"}
                >
                  {"Atwood Church\nSaturday 02/03/24 [time: 7:00pm] \n"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  data-plasmic-name={"rectangle38931"}
                  data-plasmic-override={overrides.rectangle38931}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.rectangle38931
                  )}
                  component={Link}
                  href={"/genesis1"}
                  platform={"nextjs"}
                />

                <p.PlasmicLink
                  data-plasmic-name={"rectangle38955"}
                  data-plasmic-override={overrides.rectangle38955}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.rectangle38955
                  )}
                  component={Link}
                  href={"/genesis2"}
                  platform={"nextjs"}
                />

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__pVuGi
                  )}
                  component={Link}
                  href={"/genesis2"}
                  platform={"nextjs"}
                >
                  {"Moontown, Pitter Patter, FOSH"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  data-plasmic-name={"atwoodChurchFriday021724Time700Pm"}
                  data-plasmic-override={
                    overrides.atwoodChurchFriday021724Time700Pm
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.atwoodChurchFriday021724Time700Pm
                  )}
                  component={Link}
                  href={"/genesis2"}
                  platform={"nextjs"}
                >
                  {"Atwood Church\nFriday 02/17/24 [time: 7:00pm] \n"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  data-plasmic-name={"rectangle38956"}
                  data-plasmic-override={overrides.rectangle38956}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.rectangle38956
                  )}
                  component={Link}
                  href={"/genesis2"}
                  platform={"nextjs"}
                />

                <p.PlasmicLink
                  data-plasmic-name={"rectangle38957"}
                  data-plasmic-override={overrides.rectangle38957}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.rectangle38957
                  )}
                  component={Link}
                  href={"/genesis3"}
                  platform={"nextjs"}
                />

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__oeDaP
                  )}
                  component={Link}
                  href={"/genesis3"}
                  platform={"nextjs"}
                >
                  {"Wild Blue Yonder, Trip Lotus,\nFunky Lamp"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  data-plasmic-name={"atwoodChurchFriday030124Time700Pm"}
                  data-plasmic-override={
                    overrides.atwoodChurchFriday030124Time700Pm
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.atwoodChurchFriday030124Time700Pm
                  )}
                  component={Link}
                  href={"/genesis3"}
                  platform={"nextjs"}
                >
                  {"Atwood Church\nFriday 03/01/24 [time: 7:00pm] \n"}
                </p.PlasmicLink>
                <p.PlasmicLink
                  data-plasmic-name={"rectangle38958"}
                  data-plasmic-override={overrides.rectangle38958}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.rectangle38958
                  )}
                  component={Link}
                  href={"/genesis3"}
                  platform={"nextjs"}
                />
              </div>
            </div>
          </section>
          <section
            data-plasmic-name={"whatis"}
            data-plasmic-override={overrides.whatis}
            className={classNames(projectcss.all, sty.whatis)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vwnfG
              )}
            >
              {"WHAT IS \nPOST GENRE?"}
            </div>
            <div
              data-plasmic-name={"figmaPaste2"}
              data-plasmic-override={overrides.figmaPaste2}
              className={classNames(projectcss.all, sty.figmaPaste2)}
            >
              <div
                data-plasmic-name={"rectangle38940"}
                data-plasmic-override={overrides.rectangle38940}
                className={classNames(projectcss.all, sty.rectangle38940)}
              />

              <div
                data-plasmic-name={"rectangle38941"}
                data-plasmic-override={overrides.rectangle38941}
                className={classNames(projectcss.all, sty.rectangle38941)}
              />

              <div
                data-plasmic-name={"rectangle38942"}
                data-plasmic-override={overrides.rectangle38942}
                className={classNames(projectcss.all, sty.rectangle38942)}
              />
            </div>
          </section>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              data-plasmic-name={"figmaPaste3"}
              data-plasmic-override={overrides.figmaPaste3}
              className={classNames(projectcss.all, sty.figmaPaste3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2B0Js
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Post Genre"}
                  </span>
                  <React.Fragment>
                    {
                      "  is a mission driven organization focused on connecting the Oakland music scene with its larger community. We believe the connective quality of live music can be used as a tool to redefine a more vibrant and resilient artistic culture in Pittsburgh.\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"rectangle38944"}
                data-plasmic-override={overrides.rectangle38944}
                className={classNames(projectcss.all, sty.rectangle38944)}
              />

              <div
                data-plasmic-name={"rectangle38945"}
                data-plasmic-override={overrides.rectangle38945}
                className={classNames(projectcss.all, sty.rectangle38945)}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rleut
                )}
              >
                {
                  "Our \u201csteel city\u201d was an industrial backbone to the growing United States, and now as the country evolves toward healthcare and technology, Pittsburgh is moving with it. As we grow and gain access to more resources, Post-Genre aims to protect and develop our cities\u2019 cultural roots. That means reminding people of the value of art: in bringing beauty to the community, and in showing each other that we are not alone.\n\n\n\n\n\n\n\n\n\n\n\n"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uNq2
                )}
              >
                {
                  "So what type of music do we support? We believe in the artists who don\u2019t fit into a single category, because life can\u2019t be defined in just one category, and creation stems from the human experience. No person is just one thing \u2013 good, bad, serious, or sad. All of us are all of those things, and as music is a reflection of life, we support the artists who are sharing their own truths, no matter what they sound like, in the hopes that it might bring us a little bit closer."
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zlYLz
                )}
              >
                {"Roots"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__djWoF
                )}
              >
                {"All Genres"}
              </div>
            </div>
          </section>
          <Footer2
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            className={classNames("__wab_instance", sty.footer2)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  postGenre: [
    "postGenre",
    "navBar",
    "mainPage",
    "upcomingEvents",
    "allArtists",
    "figmaPaste",
    "rectangle38929",
    "pitterPatter9FiftySevenSouthsiders",
    "locationFriday112023",
    "rectangle38930",
    "atwoodChurchSaturday020324Time700Pm",
    "rectangle38931",
    "rectangle38955",
    "atwoodChurchFriday021724Time700Pm",
    "rectangle38956",
    "rectangle38957",
    "atwoodChurchFriday030124Time700Pm",
    "rectangle38958",
    "whatis",
    "figmaPaste2",
    "rectangle38940",
    "rectangle38941",
    "rectangle38942",
    "section",
    "figmaPaste3",
    "rectangle38944",
    "rectangle38945",
    "footer2"
  ],
  navBar: ["navBar"],
  mainPage: ["mainPage"],
  upcomingEvents: [
    "upcomingEvents",
    "allArtists",
    "figmaPaste",
    "rectangle38929",
    "pitterPatter9FiftySevenSouthsiders",
    "locationFriday112023",
    "rectangle38930",
    "atwoodChurchSaturday020324Time700Pm",
    "rectangle38931",
    "rectangle38955",
    "atwoodChurchFriday021724Time700Pm",
    "rectangle38956",
    "rectangle38957",
    "atwoodChurchFriday030124Time700Pm",
    "rectangle38958"
  ],
  allArtists: ["allArtists"],
  figmaPaste: [
    "figmaPaste",
    "rectangle38929",
    "pitterPatter9FiftySevenSouthsiders",
    "locationFriday112023",
    "rectangle38930",
    "atwoodChurchSaturday020324Time700Pm",
    "rectangle38931",
    "rectangle38955",
    "atwoodChurchFriday021724Time700Pm",
    "rectangle38956",
    "rectangle38957",
    "atwoodChurchFriday030124Time700Pm",
    "rectangle38958"
  ],
  rectangle38929: ["rectangle38929"],
  pitterPatter9FiftySevenSouthsiders: ["pitterPatter9FiftySevenSouthsiders"],
  locationFriday112023: ["locationFriday112023"],
  rectangle38930: ["rectangle38930"],
  atwoodChurchSaturday020324Time700Pm: ["atwoodChurchSaturday020324Time700Pm"],
  rectangle38931: ["rectangle38931"],
  rectangle38955: ["rectangle38955"],
  atwoodChurchFriday021724Time700Pm: ["atwoodChurchFriday021724Time700Pm"],
  rectangle38956: ["rectangle38956"],
  rectangle38957: ["rectangle38957"],
  atwoodChurchFriday030124Time700Pm: ["atwoodChurchFriday030124Time700Pm"],
  rectangle38958: ["rectangle38958"],
  whatis: [
    "whatis",
    "figmaPaste2",
    "rectangle38940",
    "rectangle38941",
    "rectangle38942"
  ],
  figmaPaste2: [
    "figmaPaste2",
    "rectangle38940",
    "rectangle38941",
    "rectangle38942"
  ],
  rectangle38940: ["rectangle38940"],
  rectangle38941: ["rectangle38941"],
  rectangle38942: ["rectangle38942"],
  section: ["section", "figmaPaste3", "rectangle38944", "rectangle38945"],
  figmaPaste3: ["figmaPaste3", "rectangle38944", "rectangle38945"],
  rectangle38944: ["rectangle38944"],
  rectangle38945: ["rectangle38945"],
  footer2: ["footer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  postGenre: "div";
  navBar: typeof NavBar;
  mainPage: "section";
  upcomingEvents: "section";
  allArtists: typeof Card;
  figmaPaste: "div";
  rectangle38929: "a";
  pitterPatter9FiftySevenSouthsiders: "div";
  locationFriday112023: "div";
  rectangle38930: "div";
  atwoodChurchSaturday020324Time700Pm: "a";
  rectangle38931: "a";
  rectangle38955: "a";
  atwoodChurchFriday021724Time700Pm: "a";
  rectangle38956: "a";
  rectangle38957: "a";
  atwoodChurchFriday030124Time700Pm: "a";
  rectangle38958: "a";
  whatis: "section";
  figmaPaste2: "div";
  rectangle38940: "div";
  rectangle38941: "div";
  rectangle38942: "div";
  section: "section";
  figmaPaste3: "div";
  rectangle38944: "div";
  rectangle38945: "div";
  footer2: typeof Footer2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "postGenre") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("postGenre"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    mainPage: makeNodeComponent("mainPage"),
    upcomingEvents: makeNodeComponent("upcomingEvents"),
    allArtists: makeNodeComponent("allArtists"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    rectangle38929: makeNodeComponent("rectangle38929"),
    pitterPatter9FiftySevenSouthsiders: makeNodeComponent(
      "pitterPatter9FiftySevenSouthsiders"
    ),
    locationFriday112023: makeNodeComponent("locationFriday112023"),
    rectangle38930: makeNodeComponent("rectangle38930"),
    atwoodChurchSaturday020324Time700Pm: makeNodeComponent(
      "atwoodChurchSaturday020324Time700Pm"
    ),
    rectangle38931: makeNodeComponent("rectangle38931"),
    rectangle38955: makeNodeComponent("rectangle38955"),
    atwoodChurchFriday021724Time700Pm: makeNodeComponent(
      "atwoodChurchFriday021724Time700Pm"
    ),
    rectangle38956: makeNodeComponent("rectangle38956"),
    rectangle38957: makeNodeComponent("rectangle38957"),
    atwoodChurchFriday030124Time700Pm: makeNodeComponent(
      "atwoodChurchFriday030124Time700Pm"
    ),
    rectangle38958: makeNodeComponent("rectangle38958"),
    whatis: makeNodeComponent("whatis"),
    figmaPaste2: makeNodeComponent("figmaPaste2"),
    rectangle38940: makeNodeComponent("rectangle38940"),
    rectangle38941: makeNodeComponent("rectangle38941"),
    rectangle38942: makeNodeComponent("rectangle38942"),
    section: makeNodeComponent("section"),
    figmaPaste3: makeNodeComponent("figmaPaste3"),
    rectangle38944: makeNodeComponent("rectangle38944"),
    rectangle38945: makeNodeComponent("rectangle38945"),
    footer2: makeNodeComponent("footer2"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "POST GENRE",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
