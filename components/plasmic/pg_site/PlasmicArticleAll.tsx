// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oATn9WrAqtDeaLtJDt8hxD
// Component: EN_ThhJDYaVx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pg_site.module.css"; // plasmic-import: oATn9WrAqtDeaLtJDt8hxD/projectcss
import sty from "./PlasmicArticleAll.module.css"; // plasmic-import: EN_ThhJDYaVx/css

createPlasmicElementProxy;

export type PlasmicArticleAll__VariantMembers = {};
export type PlasmicArticleAll__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticleAll__VariantsArgs;
export const PlasmicArticleAll__VariantProps = new Array<VariantPropType>();

export type PlasmicArticleAll__ArgsType = {};
type ArgPropType = keyof PlasmicArticleAll__ArgsType;
export const PlasmicArticleAll__ArgProps = new Array<ArgPropType>();

export type PlasmicArticleAll__OverridesType = {
  article?: p.Flex<"div">;
  rectangle38928?: p.Flex<"div">;
  rectangle38952?: p.Flex<"div">;
};

export interface DefaultArticleAllProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArticleAll__RenderFunc(props: {
  variants: PlasmicArticleAll__VariantsArgs;
  args: PlasmicArticleAll__ArgsType;
  overrides: PlasmicArticleAll__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "77ee4867-e742-422b-8853-345ba6995ce4",
        userArgs: {},
        cacheKey: `plasmic.$.77ee4867-e742-422b-8853-345ba6995ce4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <div
      data-plasmic-name={"article"}
      data-plasmic-override={overrides.article}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.article
      )}
    >
      <div
        data-plasmic-name={"rectangle38928"}
        data-plasmic-override={overrides.rectangle38928}
        className={classNames(projectcss.all, sty.rectangle38928)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jWsSp
          )}
        >
          {"By: Aidan Dunn"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___90OA
          )}
        >
          {"10 Nov 2023"}
        </div>
        <div
          data-plasmic-name={"rectangle38952"}
          data-plasmic-override={overrides.rectangle38952}
          className={classNames(projectcss.all, sty.rectangle38952)}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__q3J36
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $queries.currentItem.data[0].Title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Mr.Dr. drops new single \u201cSouth\nOakland\u201d";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sP4Ri
          )}
        >
          {
            'Pittsburgh\'s most enigmatic and eclectic musical collective, "Mr. Dr.," has dropped a scorching new single, "South O," that\'s setting the Steel City\'s music scene on fire. This explosive track is destined to become an instant classic...'
          }
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  article: ["article", "rectangle38928", "rectangle38952"],
  rectangle38928: ["rectangle38928", "rectangle38952"],
  rectangle38952: ["rectangle38952"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  article: "div";
  rectangle38928: "div";
  rectangle38952: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticleAll__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticleAll__VariantsArgs;
    args?: PlasmicArticleAll__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticleAll__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArticleAll__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicArticleAll__ArgProps,
          internalVariantPropNames: PlasmicArticleAll__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArticleAll__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "article") {
    func.displayName = "PlasmicArticleAll";
  } else {
    func.displayName = `PlasmicArticleAll.${nodeName}`;
  }
  return func;
}

export const PlasmicArticleAll = Object.assign(
  // Top-level PlasmicArticleAll renders the root element
  makeNodeComponent("article"),
  {
    // Helper components rendering sub-elements
    rectangle38928: makeNodeComponent("rectangle38928"),
    rectangle38952: makeNodeComponent("rectangle38952"),

    // Metadata about props expected for PlasmicArticleAll
    internalVariantProps: PlasmicArticleAll__VariantProps,
    internalArgProps: PlasmicArticleAll__ArgProps
  }
);

export default PlasmicArticleAll;
/* prettier-ignore-end */
