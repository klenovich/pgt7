// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oATn9WrAqtDeaLtJDt8hxD
// Component: DUd-yxFV_3vR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pg_site.module.css"; // plasmic-import: oATn9WrAqtDeaLtJDt8hxD/projectcss
import sty from "./PlasmicFooter2.module.css"; // plasmic-import: DUd-yxFV_3vR/css

createPlasmicElementProxy;

export type PlasmicFooter2__VariantMembers = {};
export type PlasmicFooter2__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter2__VariantsArgs;
export const PlasmicFooter2__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter2__ArgsType = {};
type ArgPropType = keyof PlasmicFooter2__ArgsType;
export const PlasmicFooter2__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter2__OverridesType = {
  root?: Flex__<"section">;
  figmaPaste4?: Flex__<"div">;
  rectangle38946?: Flex__<"a"> & Partial<LinkProps>;
  rectangle38947?: Flex__<"a"> & Partial<LinkProps>;
  rectangle38948?: Flex__<"a"> & Partial<LinkProps>;
  rectangle38949?: Flex__<"div">;
  rectangle38884?: Flex__<"a"> & Partial<LinkProps>;
  rectangle38950?: Flex__<"a"> & Partial<LinkProps>;
  rectangle38951?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultFooter2Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter2__RenderFunc(props: {
  variants: PlasmicFooter2__VariantsArgs;
  args: PlasmicFooter2__ArgsType;
  overrides: PlasmicFooter2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"figmaPaste4"}
        data-plasmic-override={overrides.figmaPaste4}
        className={classNames(projectcss.all, sty.figmaPaste4)}
      >
        <PlasmicLink__
          data-plasmic-name={"rectangle38946"}
          data-plasmic-override={overrides.rectangle38946}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.rectangle38946
          )}
          component={Link}
          href={`/journal`}
          platform={"nextjs"}
        />

        <PlasmicLink__
          data-plasmic-name={"rectangle38947"}
          data-plasmic-override={overrides.rectangle38947}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.rectangle38947
          )}
          component={Link}
          href={`/events`}
          platform={"nextjs"}
        />

        <PlasmicLink__
          data-plasmic-name={"rectangle38948"}
          data-plasmic-override={overrides.rectangle38948}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.rectangle38948
          )}
          component={Link}
          href={`/artists`}
          platform={"nextjs"}
        />

        <div
          data-plasmic-name={"rectangle38949"}
          data-plasmic-override={overrides.rectangle38949}
          className={classNames(projectcss.all, sty.rectangle38949)}
        />

        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__zMi28
          )}
          component={Link}
          href={`/artists`}
          platform={"nextjs"}
        >
          {"ARTISTS"}
        </PlasmicLink__>
        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__irxP
          )}
          component={Link}
          href={`/events`}
          platform={"nextjs"}
        >
          {"SHOWS"}
        </PlasmicLink__>
        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__uruHn
          )}
          component={Link}
          href={`/journal`}
          platform={"nextjs"}
        >
          {"JOURNAL"}
        </PlasmicLink__>
        <PlasmicLink__
          data-plasmic-name={"rectangle38884"}
          data-plasmic-override={overrides.rectangle38884}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.rectangle38884
          )}
          component={Link}
          href={"/team"}
          platform={"nextjs"}
        />

        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__akzFu
          )}
          component={Link}
          href={"/team"}
          platform={"nextjs"}
        >
          {"TEAM"}
        </PlasmicLink__>
        <PlasmicLink__
          data-plasmic-name={"rectangle38950"}
          data-plasmic-override={overrides.rectangle38950}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.rectangle38950
          )}
          component={Link}
          href={"mailto:info@postgenre.world"}
          platform={"nextjs"}
          target={"_blank"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ti18O
            )}
          >
            {"CONTACT US"}
          </div>
        </PlasmicLink__>
        <PlasmicLink__
          data-plasmic-name={"rectangle38951"}
          data-plasmic-override={overrides.rectangle38951}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.rectangle38951
          )}
          component={Link}
          href={"https://discord.gg/Vm5RJKed"}
          platform={"nextjs"}
          target={"_blank"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mgvh
            )}
          >
            {"JOIN THE TEAM"}
          </div>
        </PlasmicLink__>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__kxD5
          )}
        >
          {"2024 POST GENRE"}
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "figmaPaste4",
    "rectangle38946",
    "rectangle38947",
    "rectangle38948",
    "rectangle38949",
    "rectangle38884",
    "rectangle38950",
    "rectangle38951"
  ],
  figmaPaste4: [
    "figmaPaste4",
    "rectangle38946",
    "rectangle38947",
    "rectangle38948",
    "rectangle38949",
    "rectangle38884",
    "rectangle38950",
    "rectangle38951"
  ],
  rectangle38946: ["rectangle38946"],
  rectangle38947: ["rectangle38947"],
  rectangle38948: ["rectangle38948"],
  rectangle38949: ["rectangle38949"],
  rectangle38884: ["rectangle38884"],
  rectangle38950: ["rectangle38950"],
  rectangle38951: ["rectangle38951"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  figmaPaste4: "div";
  rectangle38946: "a";
  rectangle38947: "a";
  rectangle38948: "a";
  rectangle38949: "div";
  rectangle38884: "a";
  rectangle38950: "a";
  rectangle38951: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter2__VariantsArgs;
    args?: PlasmicFooter2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter2__ArgProps,
          internalVariantPropNames: PlasmicFooter2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter2";
  } else {
    func.displayName = `PlasmicFooter2.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter2 = Object.assign(
  // Top-level PlasmicFooter2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    figmaPaste4: makeNodeComponent("figmaPaste4"),
    rectangle38946: makeNodeComponent("rectangle38946"),
    rectangle38947: makeNodeComponent("rectangle38947"),
    rectangle38948: makeNodeComponent("rectangle38948"),
    rectangle38949: makeNodeComponent("rectangle38949"),
    rectangle38884: makeNodeComponent("rectangle38884"),
    rectangle38950: makeNodeComponent("rectangle38950"),
    rectangle38951: makeNodeComponent("rectangle38951"),

    // Metadata about props expected for PlasmicFooter2
    internalVariantProps: PlasmicFooter2__VariantProps,
    internalArgProps: PlasmicFooter2__ArgProps
  }
);

export default PlasmicFooter2;
/* prettier-ignore-end */
