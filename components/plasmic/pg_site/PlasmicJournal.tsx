// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oATn9WrAqtDeaLtJDt8hxD
// Component: 7-eI8frsoj5D

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: zoXit50v16ZA/component
import JournalPost2 from "../../JournalPost2"; // plasmic-import: lOAhjoWYBUsL/component
import Footer2 from "../../Footer2"; // plasmic-import: DUd-yxFV_3vR/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pg_site.module.css"; // plasmic-import: oATn9WrAqtDeaLtJDt8hxD/projectcss
import sty from "./PlasmicJournal.module.css"; // plasmic-import: 7-eI8frsoj5D/css

createPlasmicElementProxy;

export type PlasmicJournal__VariantMembers = {};
export type PlasmicJournal__VariantsArgs = {};
type VariantPropType = keyof PlasmicJournal__VariantsArgs;
export const PlasmicJournal__VariantProps = new Array<VariantPropType>();

export type PlasmicJournal__ArgsType = {};
type ArgPropType = keyof PlasmicJournal__ArgsType;
export const PlasmicJournal__ArgProps = new Array<ArgPropType>();

export type PlasmicJournal__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  section?: p.Flex<"section">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  journalPost2?: p.Flex<typeof JournalPost2>;
  footer2?: p.Flex<typeof Footer2>;
};

export interface DefaultJournalProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicJournal__RenderFunc(props: {
  variants: PlasmicJournal__VariantsArgs;
  args: PlasmicJournal__ArgsType;
  overrides: PlasmicJournal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    artists: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "e20a312c-b498-4967-8431-0238a70a022e",
        userArgs: {
          pagination: [$ctx.pagePath]
        },
        cacheKey: `plasmic.$.e20a312c-b498-4967-8431-0238a70a022e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    articles: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "77ee4867-e742-422b-8853-345ba6995ce4",
        userArgs: {},
        cacheKey: `plasmic.$.77ee4867-e742-422b-8853-345ba6995ce4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "fd620945-59b4-4549-bf8c-4afed04dc40f",
        userArgs: {},
        cacheKey: `plasmic.$.fd620945-59b4-4549-bf8c-4afed04dc40f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "fd620945-59b4-4549-bf8c-4afed04dc40f",
        userArgs: {},
        cacheKey: `plasmic.$.fd620945-59b4-4549-bf8c-4afed04dc40f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    componentData2: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "c76df955-e7f0-4e1a-8371-1825ae967c80",
        userArgs: {
          ids: [
            $queries.query.data.find(
              row => row.__airtable_id === currentItem["Team Members"][0]
            ).Name
          ]
        },
        cacheKey: `plasmic.$.c76df955-e7f0-4e1a-8371-1825ae967c80.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicJournal.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicJournal.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicJournal.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img___72Nk1)}
            displayHeight={"auto"}
            displayMaxHeight={"300px"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/pg_site/images/screenshot20231027At31405PMpng.png",
              fullWidth: 1214,
              fullHeight: 809,
              aspectRatio: undefined
            }}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__b7XWq
              )}
            >
              {"JOURNAL"}
            </h1>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.articles.data
                    .sort((a, b) => new Date(b.Date) - new Date(a.Date))
                    .slice(0, 10);
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <p.PlasmicLink
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  href={`/journal/${(() => {
                    try {
                      return currentItem.slug;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}`}
                  key={currentIndex}
                  platform={"nextjs"}
                >
                  <JournalPost2
                    data-plasmic-name={"journalPost2"}
                    data-plasmic-override={overrides.journalPost2}
                    className={classNames("__wab_instance", sty.journalPost2)}
                    currentItem={currentItem}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j87
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const date = new Date(currentItem.Date);
                                const options = {
                                  day: "numeric",
                                  month: "long"
                                };
                                return date.toLocaleDateString(
                                  "en-US",
                                  options
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "POST GENRE";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    slot2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sQM9
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.currentItem.Title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Mr.Dr. drops new single \u201cSouth\nOakland\u201d";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    slot3={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v3AA9
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const postBody =
                                  $props.currentItem["Post Body"];
                                if (postBody.length <= 200) {
                                  return postBody;
                                } else {
                                  return postBody.slice(0, 200) + "...";
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return 'Pittsburgh\'s most enigmatic and eclectic musical collective, "Mr. Dr.," has dropped a scorching new single, "South O," that\'s setting the Steel City\'s music scene on fire. This explosive track is destined to become an instant classic...';
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    slot4={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__xs4Lg)}
                        displayHeight={"349px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return currentItem.Picture[0].url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    }
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "By: " + currentItem["Author Name"];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "By: Aidan Dunn";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </JournalPost2>
                </p.PlasmicLink>
              );
            })}
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__o2Vb
              )}
              onClick={async event => {
                const $steps = {};

                $steps["goToJournal2"] = true
                  ? (() => {
                      const actionArgs = { destination: `/all-journal` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToJournal2"] != null &&
                  typeof $steps["goToJournal2"] === "object" &&
                  typeof $steps["goToJournal2"].then === "function"
                ) {
                  $steps["goToJournal2"] = await $steps["goToJournal2"];
                }
              }}
            >
              {"ALL POSTS >"}
            </h1>
          </section>
          <Footer2
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            className={classNames("__wab_instance", sty.footer2)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navBar", "section", "link", "journalPost2", "footer2"],
  navBar: ["navBar"],
  section: ["section", "link", "journalPost2"],
  link: ["link", "journalPost2"],
  journalPost2: ["journalPost2"],
  footer2: ["footer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  section: "section";
  link: "a";
  journalPost2: typeof JournalPost2;
  footer2: typeof Footer2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicJournal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicJournal__VariantsArgs;
    args?: PlasmicJournal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicJournal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicJournal__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicJournal__ArgProps,
          internalVariantPropNames: PlasmicJournal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicJournal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicJournal";
  } else {
    func.displayName = `PlasmicJournal.${nodeName}`;
  }
  return func;
}

export const PlasmicJournal = Object.assign(
  // Top-level PlasmicJournal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    section: makeNodeComponent("section"),
    link: makeNodeComponent("link"),
    journalPost2: makeNodeComponent("journalPost2"),
    footer2: makeNodeComponent("footer2"),

    // Metadata about props expected for PlasmicJournal
    internalVariantProps: PlasmicJournal__VariantProps,
    internalArgProps: PlasmicJournal__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "POST GENRE - JOURNAL",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicJournal;
/* prettier-ignore-end */
