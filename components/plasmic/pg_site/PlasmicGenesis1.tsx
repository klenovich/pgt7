// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oATn9WrAqtDeaLtJDt8hxD
// Component: EXjmg34ajN5F

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: zoXit50v16ZA/component
import Card from "../../Card"; // plasmic-import: at931Xm9Xbfa/component
import Footer2 from "../../Footer2"; // plasmic-import: DUd-yxFV_3vR/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pg_site.module.css"; // plasmic-import: oATn9WrAqtDeaLtJDt8hxD/projectcss
import sty from "./PlasmicGenesis1.module.css"; // plasmic-import: EXjmg34ajN5F/css

createPlasmicElementProxy;

export type PlasmicGenesis1__VariantMembers = {};
export type PlasmicGenesis1__VariantsArgs = {};
type VariantPropType = keyof PlasmicGenesis1__VariantsArgs;
export const PlasmicGenesis1__VariantProps = new Array<VariantPropType>();

export type PlasmicGenesis1__ArgsType = {};
type ArgPropType = keyof PlasmicGenesis1__ArgsType;
export const PlasmicGenesis1__ArgProps = new Array<ArgPropType>();

export type PlasmicGenesis1__OverridesType = {
  postGenre?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  bandInfo?: p.Flex<"section">;
  lfo2NewObidPoster1?: p.Flex<"div">;
  name?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  description?: p.Flex<"section">;
  about?: p.Flex<"div">;
  askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow?: p.Flex<"div">;
  figmaPaste2?: p.Flex<"a"> & Partial<LinkProps>;
  rectangle38918?: p.Flex<"div">;
  about3?: p.Flex<"div">;
  card?: p.Flex<typeof Card>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<typeof p.PlasmicImg>;
  figmaPaste?: p.Flex<"div">;
  rectangle38961?: p.Flex<"div">;
  pitterPatter9FiftySevenSouthsiders?: p.Flex<"div">;
  locationFriday112023?: p.Flex<"div">;
  rectangle38962?: p.Flex<"div">;
  atwoodChurchSaturday020324Time700Pm?: p.Flex<"div">;
  rectangle38963?: p.Flex<"div">;
  pitterPatter9FiftySevenSouthsiders2?: p.Flex<"div">;
  locationFriday1120232?: p.Flex<"div">;
  rectangle38976?: p.Flex<"div">;
  rectangle38977?: p.Flex<"div">;
  rectangle38978?: p.Flex<"div">;
  rectangle38979?: p.Flex<"div">;
  cSouthsiders?: p.Flex<"div">;
  locationFriday1120233?: p.Flex<"div">;
  rectangle38980?: p.Flex<"div">;
  rectangle38981?: p.Flex<"div">;
  footer2?: p.Flex<typeof Footer2>;
};

export interface DefaultGenesis1Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGenesis1__RenderFunc(props: {
  variants: PlasmicGenesis1__VariantsArgs;
  args: PlasmicGenesis1__ArgsType;
  overrides: PlasmicGenesis1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    event: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "9d74cc69-bfb6-48a0-960b-eac4370b1698",
        userArgs: {
          filters: [$ctx.params.slug]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.9d74cc69-bfb6-48a0-960b-eac4370b1698.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    artistshere: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "1854939d-e8e9-4fbe-acf3-dbbf0da059a1",
        userArgs: {
          ids: [$queries.event.data[0].Artists]
        },
        cacheKey: `plasmic.$.1854939d-e8e9-4fbe-acf3-dbbf0da059a1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    locationInfo: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "0609617e-99d4-4347-98f1-c4886f6a8edb",
        userArgs: {
          id: [$queries.event.data[0].Location[0]]
        },
        cacheKey: `plasmic.$.0609617e-99d4-4347-98f1-c4886f6a8edb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicGenesis1.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicGenesis1.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicGenesis1.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"postGenre"}
          data-plasmic-override={overrides.postGenre}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.postGenre
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <section
            data-plasmic-name={"bandInfo"}
            data-plasmic-override={overrides.bandInfo}
            className={classNames(projectcss.all, sty.bandInfo)}
          >
            <div
              data-plasmic-name={"lfo2NewObidPoster1"}
              data-plasmic-override={overrides.lfo2NewObidPoster1}
              className={classNames(projectcss.all, sty.lfo2NewObidPoster1)}
            />

            <section
              data-plasmic-name={"name"}
              data-plasmic-override={overrides.name}
              className={classNames(projectcss.all, sty.name)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Live From Oakland:\nGenesis (Vol.1)"}
              </h1>
            </section>
            <section
              data-plasmic-name={"description"}
              data-plasmic-override={overrides.description}
              className={classNames(projectcss.all, sty.description)}
            >
              <div
                data-plasmic-name={"about"}
                data-plasmic-override={overrides.about}
                className={classNames(projectcss.all, sty.about)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ghNr1
                  )}
                >
                  {"About"}
                </div>
                <div
                  data-plasmic-name={
                    "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow"
                  }
                  data-plasmic-override={
                    overrides.askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow
                  )}
                >
                  {
                    "The premiere of the 'Live From Oakland: Series 2 Genesis' concert series will feature some familiar faces as the first-ever show hosted at the Atwood church. Volume One will showcase Heading North, Clay Coast, and 9Fiftyseven."
                  }
                </div>
                <p.PlasmicLink
                  data-plasmic-name={"figmaPaste2"}
                  data-plasmic-override={overrides.figmaPaste2}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.figmaPaste2
                  )}
                  component={Link}
                  href={"https://indietix.org/events/postgenre/genesis3"}
                  platform={"nextjs"}
                >
                  <div
                    data-plasmic-name={"rectangle38918"}
                    data-plasmic-override={overrides.rectangle38918}
                    className={classNames(projectcss.all, sty.rectangle38918)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hr3R9
                    )}
                  >
                    {"TICKETS"}
                  </div>
                </p.PlasmicLink>
              </div>
              <div
                data-plasmic-name={"about3"}
                data-plasmic-override={overrides.about3}
                className={classNames(projectcss.all, sty.about3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j8LnB
                  )}
                >
                  {"Artists"}
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.artistshere.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Card
                      data-plasmic-name={"card"}
                      data-plasmic-override={overrides.card}
                      className={classNames("__wab_instance", sty.card)}
                      key={currentIndex}
                      noTitle={true}
                    >
                      <p.PlasmicLink
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link
                        )}
                        component={Link}
                        href={(() => {
                          try {
                            return "/artists/" + currentItem.slug;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7Non
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"auto"}
                            displayMaxHeight={"90px"}
                            displayMaxWidth={"35%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"200px"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return currentItem.Photo[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kgZi4
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__o4BfG
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "POST GENRE ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uYrE
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.Location;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "POST GENRE ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lEuA
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.Genre;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "POST GENRE ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                      </p.PlasmicLink>
                    </Card>
                  );
                })}
                <div
                  data-plasmic-name={"figmaPaste"}
                  data-plasmic-override={overrides.figmaPaste}
                  className={classNames(projectcss.all, sty.figmaPaste)}
                >
                  <div
                    data-plasmic-name={"rectangle38961"}
                    data-plasmic-override={overrides.rectangle38961}
                    className={classNames(projectcss.all, sty.rectangle38961)}
                  />

                  <div
                    data-plasmic-name={"pitterPatter9FiftySevenSouthsiders"}
                    data-plasmic-override={
                      overrides.pitterPatter9FiftySevenSouthsiders
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.pitterPatter9FiftySevenSouthsiders
                    )}
                  >
                    {"Pitter Patter, 9FiftySeven, \nSouthsiders "}
                  </div>
                  <div
                    data-plasmic-name={"locationFriday112023"}
                    data-plasmic-override={overrides.locationFriday112023}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.locationFriday112023
                    )}
                  >
                    {"location\nFriday 11/20/23 \n"}
                  </div>
                  <div
                    data-plasmic-name={"rectangle38962"}
                    data-plasmic-override={overrides.rectangle38962}
                    className={classNames(projectcss.all, sty.rectangle38962)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iBsZe
                    )}
                  >
                    {"Heading North, Claycoast,\n9Fiftyseven"}
                  </div>
                  <div
                    data-plasmic-name={"atwoodChurchSaturday020324Time700Pm"}
                    data-plasmic-override={
                      overrides.atwoodChurchSaturday020324Time700Pm
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.atwoodChurchSaturday020324Time700Pm
                    )}
                  >
                    {"Atwood Church\nSaturday 02/03/24 [time: 7:00pm] \n"}
                  </div>
                  <div
                    data-plasmic-name={"rectangle38963"}
                    data-plasmic-override={overrides.rectangle38963}
                    className={classNames(projectcss.all, sty.rectangle38963)}
                  />

                  <div
                    data-plasmic-name={"pitterPatter9FiftySevenSouthsiders2"}
                    data-plasmic-override={
                      overrides.pitterPatter9FiftySevenSouthsiders2
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.pitterPatter9FiftySevenSouthsiders2
                    )}
                  >
                    {"Pitter Patter, 9FiftySeven, \nSouthsiders "}
                  </div>
                  <div
                    data-plasmic-name={"locationFriday1120232"}
                    data-plasmic-override={overrides.locationFriday1120232}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.locationFriday1120232
                    )}
                  >
                    {"location\nFriday 11/20/23 \n"}
                  </div>
                  <div
                    data-plasmic-name={"rectangle38976"}
                    data-plasmic-override={overrides.rectangle38976}
                    className={classNames(projectcss.all, sty.rectangle38976)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eUZjG
                    )}
                  >
                    {"Heading North"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dE1
                    )}
                  >
                    {"Oakland"}
                  </div>
                  <div
                    data-plasmic-name={"rectangle38977"}
                    data-plasmic-override={overrides.rectangle38977}
                    className={classNames(projectcss.all, sty.rectangle38977)}
                  />

                  <div
                    data-plasmic-name={"rectangle38978"}
                    data-plasmic-override={overrides.rectangle38978}
                    className={classNames(projectcss.all, sty.rectangle38978)}
                  />

                  <div
                    data-plasmic-name={"rectangle38979"}
                    data-plasmic-override={overrides.rectangle38979}
                    className={classNames(projectcss.all, sty.rectangle38979)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f56Ne
                    )}
                  >
                    {"9FIFTYSEVEN"}
                  </div>
                  <div
                    data-plasmic-name={"cSouthsiders"}
                    data-plasmic-override={overrides.cSouthsiders}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.cSouthsiders
                    )}
                  >
                    {"c\nSouthsiders "}
                  </div>
                  <div
                    data-plasmic-name={"locationFriday1120233"}
                    data-plasmic-override={overrides.locationFriday1120233}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.locationFriday1120233
                    )}
                  >
                    {"location\nFriday 11/20/23 \n"}
                  </div>
                  <div
                    data-plasmic-name={"rectangle38980"}
                    data-plasmic-override={overrides.rectangle38980}
                    className={classNames(projectcss.all, sty.rectangle38980)}
                  />

                  <div
                    data-plasmic-name={"rectangle38981"}
                    data-plasmic-override={overrides.rectangle38981}
                    className={classNames(projectcss.all, sty.rectangle38981)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ne0Cq
                    )}
                  >
                    {"Oakland"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eGj93
                    )}
                  >
                    {"Clay Coast"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pnZwI
                    )}
                  >
                    {"Oakland"}
                  </div>
                </div>
              </div>
            </section>
            <Footer2
              data-plasmic-name={"footer2"}
              data-plasmic-override={overrides.footer2}
              className={classNames("__wab_instance", sty.footer2)}
            />
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  postGenre: [
    "postGenre",
    "navBar",
    "bandInfo",
    "lfo2NewObidPoster1",
    "name",
    "h1",
    "description",
    "about",
    "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow",
    "figmaPaste2",
    "rectangle38918",
    "about3",
    "card",
    "link",
    "img",
    "figmaPaste",
    "rectangle38961",
    "pitterPatter9FiftySevenSouthsiders",
    "locationFriday112023",
    "rectangle38962",
    "atwoodChurchSaturday020324Time700Pm",
    "rectangle38963",
    "pitterPatter9FiftySevenSouthsiders2",
    "locationFriday1120232",
    "rectangle38976",
    "rectangle38977",
    "rectangle38978",
    "rectangle38979",
    "cSouthsiders",
    "locationFriday1120233",
    "rectangle38980",
    "rectangle38981",
    "footer2"
  ],
  navBar: ["navBar"],
  bandInfo: [
    "bandInfo",
    "lfo2NewObidPoster1",
    "name",
    "h1",
    "description",
    "about",
    "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow",
    "figmaPaste2",
    "rectangle38918",
    "about3",
    "card",
    "link",
    "img",
    "figmaPaste",
    "rectangle38961",
    "pitterPatter9FiftySevenSouthsiders",
    "locationFriday112023",
    "rectangle38962",
    "atwoodChurchSaturday020324Time700Pm",
    "rectangle38963",
    "pitterPatter9FiftySevenSouthsiders2",
    "locationFriday1120232",
    "rectangle38976",
    "rectangle38977",
    "rectangle38978",
    "rectangle38979",
    "cSouthsiders",
    "locationFriday1120233",
    "rectangle38980",
    "rectangle38981",
    "footer2"
  ],
  lfo2NewObidPoster1: ["lfo2NewObidPoster1"],
  name: ["name", "h1"],
  h1: ["h1"],
  description: [
    "description",
    "about",
    "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow",
    "figmaPaste2",
    "rectangle38918",
    "about3",
    "card",
    "link",
    "img",
    "figmaPaste",
    "rectangle38961",
    "pitterPatter9FiftySevenSouthsiders",
    "locationFriday112023",
    "rectangle38962",
    "atwoodChurchSaturday020324Time700Pm",
    "rectangle38963",
    "pitterPatter9FiftySevenSouthsiders2",
    "locationFriday1120232",
    "rectangle38976",
    "rectangle38977",
    "rectangle38978",
    "rectangle38979",
    "cSouthsiders",
    "locationFriday1120233",
    "rectangle38980",
    "rectangle38981"
  ],
  about: [
    "about",
    "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow",
    "figmaPaste2",
    "rectangle38918"
  ],
  askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow:
    [
      "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow"
    ],
  figmaPaste2: ["figmaPaste2", "rectangle38918"],
  rectangle38918: ["rectangle38918"],
  about3: [
    "about3",
    "card",
    "link",
    "img",
    "figmaPaste",
    "rectangle38961",
    "pitterPatter9FiftySevenSouthsiders",
    "locationFriday112023",
    "rectangle38962",
    "atwoodChurchSaturday020324Time700Pm",
    "rectangle38963",
    "pitterPatter9FiftySevenSouthsiders2",
    "locationFriday1120232",
    "rectangle38976",
    "rectangle38977",
    "rectangle38978",
    "rectangle38979",
    "cSouthsiders",
    "locationFriday1120233",
    "rectangle38980",
    "rectangle38981"
  ],
  card: ["card", "link", "img"],
  link: ["link", "img"],
  img: ["img"],
  figmaPaste: [
    "figmaPaste",
    "rectangle38961",
    "pitterPatter9FiftySevenSouthsiders",
    "locationFriday112023",
    "rectangle38962",
    "atwoodChurchSaturday020324Time700Pm",
    "rectangle38963",
    "pitterPatter9FiftySevenSouthsiders2",
    "locationFriday1120232",
    "rectangle38976",
    "rectangle38977",
    "rectangle38978",
    "rectangle38979",
    "cSouthsiders",
    "locationFriday1120233",
    "rectangle38980",
    "rectangle38981"
  ],
  rectangle38961: ["rectangle38961"],
  pitterPatter9FiftySevenSouthsiders: ["pitterPatter9FiftySevenSouthsiders"],
  locationFriday112023: ["locationFriday112023"],
  rectangle38962: ["rectangle38962"],
  atwoodChurchSaturday020324Time700Pm: ["atwoodChurchSaturday020324Time700Pm"],
  rectangle38963: ["rectangle38963"],
  pitterPatter9FiftySevenSouthsiders2: ["pitterPatter9FiftySevenSouthsiders2"],
  locationFriday1120232: ["locationFriday1120232"],
  rectangle38976: ["rectangle38976"],
  rectangle38977: ["rectangle38977"],
  rectangle38978: ["rectangle38978"],
  rectangle38979: ["rectangle38979"],
  cSouthsiders: ["cSouthsiders"],
  locationFriday1120233: ["locationFriday1120233"],
  rectangle38980: ["rectangle38980"],
  rectangle38981: ["rectangle38981"],
  footer2: ["footer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  postGenre: "div";
  navBar: typeof NavBar;
  bandInfo: "section";
  lfo2NewObidPoster1: "div";
  name: "section";
  h1: "h1";
  description: "section";
  about: "div";
  askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow: "div";
  figmaPaste2: "a";
  rectangle38918: "div";
  about3: "div";
  card: typeof Card;
  link: "a";
  img: typeof p.PlasmicImg;
  figmaPaste: "div";
  rectangle38961: "div";
  pitterPatter9FiftySevenSouthsiders: "div";
  locationFriday112023: "div";
  rectangle38962: "div";
  atwoodChurchSaturday020324Time700Pm: "div";
  rectangle38963: "div";
  pitterPatter9FiftySevenSouthsiders2: "div";
  locationFriday1120232: "div";
  rectangle38976: "div";
  rectangle38977: "div";
  rectangle38978: "div";
  rectangle38979: "div";
  cSouthsiders: "div";
  locationFriday1120233: "div";
  rectangle38980: "div";
  rectangle38981: "div";
  footer2: typeof Footer2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGenesis1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGenesis1__VariantsArgs;
    args?: PlasmicGenesis1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGenesis1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGenesis1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGenesis1__ArgProps,
          internalVariantPropNames: PlasmicGenesis1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGenesis1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "postGenre") {
    func.displayName = "PlasmicGenesis1";
  } else {
    func.displayName = `PlasmicGenesis1.${nodeName}`;
  }
  return func;
}

export const PlasmicGenesis1 = Object.assign(
  // Top-level PlasmicGenesis1 renders the root element
  makeNodeComponent("postGenre"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    bandInfo: makeNodeComponent("bandInfo"),
    lfo2NewObidPoster1: makeNodeComponent("lfo2NewObidPoster1"),
    _name: makeNodeComponent("name"),
    h1: makeNodeComponent("h1"),
    description: makeNodeComponent("description"),
    about: makeNodeComponent("about"),
    askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow:
      makeNodeComponent(
        "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow"
      ),
    figmaPaste2: makeNodeComponent("figmaPaste2"),
    rectangle38918: makeNodeComponent("rectangle38918"),
    about3: makeNodeComponent("about3"),
    card: makeNodeComponent("card"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    rectangle38961: makeNodeComponent("rectangle38961"),
    pitterPatter9FiftySevenSouthsiders: makeNodeComponent(
      "pitterPatter9FiftySevenSouthsiders"
    ),
    locationFriday112023: makeNodeComponent("locationFriday112023"),
    rectangle38962: makeNodeComponent("rectangle38962"),
    atwoodChurchSaturday020324Time700Pm: makeNodeComponent(
      "atwoodChurchSaturday020324Time700Pm"
    ),
    rectangle38963: makeNodeComponent("rectangle38963"),
    pitterPatter9FiftySevenSouthsiders2: makeNodeComponent(
      "pitterPatter9FiftySevenSouthsiders2"
    ),
    locationFriday1120232: makeNodeComponent("locationFriday1120232"),
    rectangle38976: makeNodeComponent("rectangle38976"),
    rectangle38977: makeNodeComponent("rectangle38977"),
    rectangle38978: makeNodeComponent("rectangle38978"),
    rectangle38979: makeNodeComponent("rectangle38979"),
    cSouthsiders: makeNodeComponent("cSouthsiders"),
    locationFriday1120233: makeNodeComponent("locationFriday1120233"),
    rectangle38980: makeNodeComponent("rectangle38980"),
    rectangle38981: makeNodeComponent("rectangle38981"),
    footer2: makeNodeComponent("footer2"),

    // Metadata about props expected for PlasmicGenesis1
    internalVariantProps: PlasmicGenesis1__VariantProps,
    internalArgProps: PlasmicGenesis1__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "POST GENRE",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGenesis1;
/* prettier-ignore-end */
