// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oATn9WrAqtDeaLtJDt8hxD
// Component: XzcuAqtDaHyQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: zoXit50v16ZA/component
import Card from "../../Card"; // plasmic-import: at931Xm9Xbfa/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: J9NgeB3kJyHt/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pg_site.module.css"; // plasmic-import: oATn9WrAqtDeaLtJDt8hxD/projectcss
import sty from "./PlasmicBandpage.module.css"; // plasmic-import: XzcuAqtDaHyQ/css

createPlasmicElementProxy;

export type PlasmicBandpage__VariantMembers = {};
export type PlasmicBandpage__VariantsArgs = {};
type VariantPropType = keyof PlasmicBandpage__VariantsArgs;
export const PlasmicBandpage__VariantProps = new Array<VariantPropType>();

export type PlasmicBandpage__ArgsType = {};
type ArgPropType = keyof PlasmicBandpage__ArgsType;
export const PlasmicBandpage__ArgProps = new Array<ArgPropType>();

export type PlasmicBandpage__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  bandInfo?: p.Flex<"section">;
  name?: p.Flex<"section">;
  description?: p.Flex<"section">;
  upcoming?: p.Flex<"section">;
  upcomingTxt?: p.Flex<"section">;
  links?: p.Flex<"section">;
  linkText?: p.Flex<"section">;
  links2?: p.Flex<"h1">;
};

export interface DefaultBandpageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBandpage__RenderFunc(props: {
  variants: PlasmicBandpage__VariantsArgs;
  args: PlasmicBandpage__ArgsType;
  overrides: PlasmicBandpage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    artists: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "161ebbc2-fd50-4077-b1d4-9660a2edc376",
        userArgs: {
          filters: [$ctx.params.slug]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.161ebbc2-fd50-4077-b1d4-9660a2edc376.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    showsbyartist: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "4423ec1e-ef1e-455f-88e3-ebae366c58c4",
        userArgs: {},
        cacheKey: `plasmic.$.4423ec1e-ef1e-455f-88e3-ebae366c58c4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    shows: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "2080cfe3-cb5b-422c-841e-6275cd9ab8b9",
        userArgs: {
          filters: [$queries.artists.data[0].Name]
        },
        cacheKey: `plasmic.$.2080cfe3-cb5b-422c-841e-6275cd9ab8b9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <section
            data-plasmic-name={"bandInfo"}
            data-plasmic-override={overrides.bandInfo}
            className={classNames(projectcss.all, sty.bandInfo)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__giNpW)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $queries.artists.data[0].Photo[0].url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <section
              data-plasmic-name={"name"}
              data-plasmic-override={overrides.name}
              className={classNames(projectcss.all, sty.name)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__kt7P8
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.artists.data[0].Name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Page title";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h1>
            </section>
            <section
              data-plasmic-name={"description"}
              data-plasmic-override={overrides.description}
              className={classNames(projectcss.all, sty.description)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__krQwt
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.artists.data[0]["Band Description"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </section>
            <section
              data-plasmic-name={"upcoming"}
              data-plasmic-override={overrides.upcoming}
              className={classNames(projectcss.all, sty.upcoming)}
            >
              <section
                data-plasmic-name={"upcomingTxt"}
                data-plasmic-override={overrides.upcomingTxt}
                className={classNames(projectcss.all, sty.upcomingTxt)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__znSy
                  )}
                >
                  {"UPCOMING EVENTS"}
                </h1>
              </section>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.shows.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Card
                    className={classNames("__wab_instance", sty.card___4O1At)}
                    key={currentIndex}
                    noTitle={true}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pQtrd)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__eHFf)}
                        displayHeight={"80px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"35%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return currentItem.Photo[0].url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fdAtd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4YkU
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.EventName;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "something here";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qirqp
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.Date;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "something here";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                  </Card>
                );
              })}
            </section>
            <section
              data-plasmic-name={"links"}
              data-plasmic-override={overrides.links}
              className={classNames(projectcss.all, sty.links)}
            >
              <section
                data-plasmic-name={"linkText"}
                data-plasmic-override={overrides.linkText}
                className={classNames(projectcss.all, sty.linkText)}
              >
                <h1
                  data-plasmic-name={"links2"}
                  data-plasmic-override={overrides.links2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.links2
                  )}
                >
                  {"LINKS"}
                </h1>
              </section>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.artists.data[0].AppleMusicLink;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Card
                    className={classNames("__wab_instance", sty.card__h3Rg)}
                    key={currentIndex}
                    noTitle={true}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__sDk5G
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__wb7J5)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/pg_site/images/image4.png",
                          fullWidth: 924,
                          fullHeight: 158,
                          aspectRatio: undefined
                        }}
                      />
                    </p.PlasmicLink>
                  </Card>
                );
              })}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.artists.data[0].SpotifyLink;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Card
                    className={classNames("__wab_instance", sty.card__cEg6K)}
                    key={currentIndex}
                    noTitle={true}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___3BwTi
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__pvhzH)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/pg_site/images/image5.png",
                          fullWidth: 921,
                          fullHeight: 159,
                          aspectRatio: undefined
                        }}
                      />
                    </p.PlasmicLink>
                  </Card>
                );
              })}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.artists.data[0].SoundCloudLink;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Card
                    className={classNames("__wab_instance", sty.card__eeoKr)}
                    key={currentIndex}
                    noTitle={true}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__sVsVw
                      )}
                      component={Link}
                      href={(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      platform={"nextjs"}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___46Hc0)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/pg_site/images/image6.png",
                          fullWidth: 927,
                          fullHeight: 159,
                          aspectRatio: undefined
                        }}
                      />
                    </p.PlasmicLink>
                  </Card>
                );
              })}
            </section>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "bandInfo",
    "name",
    "description",
    "upcoming",
    "upcomingTxt",
    "links",
    "linkText",
    "links2"
  ],
  navBar: ["navBar"],
  bandInfo: [
    "bandInfo",
    "name",
    "description",
    "upcoming",
    "upcomingTxt",
    "links",
    "linkText",
    "links2"
  ],
  name: ["name"],
  description: ["description"],
  upcoming: ["upcoming", "upcomingTxt"],
  upcomingTxt: ["upcomingTxt"],
  links: ["links", "linkText", "links2"],
  linkText: ["linkText", "links2"],
  links2: ["links2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  bandInfo: "section";
  name: "section";
  description: "section";
  upcoming: "section";
  upcomingTxt: "section";
  links: "section";
  linkText: "section";
  links2: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBandpage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBandpage__VariantsArgs;
    args?: PlasmicBandpage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBandpage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBandpage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBandpage__ArgProps,
          internalVariantPropNames: PlasmicBandpage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBandpage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBandpage";
  } else {
    func.displayName = `PlasmicBandpage.${nodeName}`;
  }
  return func;
}

export const PlasmicBandpage = Object.assign(
  // Top-level PlasmicBandpage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    bandInfo: makeNodeComponent("bandInfo"),
    _name: makeNodeComponent("name"),
    description: makeNodeComponent("description"),
    upcoming: makeNodeComponent("upcoming"),
    upcomingTxt: makeNodeComponent("upcomingTxt"),
    links: makeNodeComponent("links"),
    linkText: makeNodeComponent("linkText"),
    links2: makeNodeComponent("links2"),

    // Metadata about props expected for PlasmicBandpage
    internalVariantProps: PlasmicBandpage__VariantProps,
    internalArgProps: PlasmicBandpage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBandpage;
/* prettier-ignore-end */
