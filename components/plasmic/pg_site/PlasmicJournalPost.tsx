// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oATn9WrAqtDeaLtJDt8hxD
// Component: uxCP9nNPQHMp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: zoXit50v16ZA/component
import JournalPost2 from "../../JournalPost2"; // plasmic-import: lOAhjoWYBUsL/component
import Footer2 from "../../Footer2"; // plasmic-import: DUd-yxFV_3vR/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pg_site.module.css"; // plasmic-import: oATn9WrAqtDeaLtJDt8hxD/projectcss
import sty from "./PlasmicJournalPost.module.css"; // plasmic-import: uxCP9nNPQHMp/css

createPlasmicElementProxy;

export type PlasmicJournalPost__VariantMembers = {};
export type PlasmicJournalPost__VariantsArgs = {};
type VariantPropType = keyof PlasmicJournalPost__VariantsArgs;
export const PlasmicJournalPost__VariantProps = new Array<VariantPropType>();

export type PlasmicJournalPost__ArgsType = {};
type ArgPropType = keyof PlasmicJournalPost__ArgsType;
export const PlasmicJournalPost__ArgProps = new Array<ArgPropType>();

export type PlasmicJournalPost__OverridesType = {
  root?: p.Flex<"div">;
  article?: p.Flex<"div">;
  rectangle38928?: p.Flex<"div">;
  rectangle38952?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  section?: p.Flex<"section">;
  about?: p.Flex<"div">;
  askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  footer2?: p.Flex<typeof Footer2>;
};

export interface DefaultJournalPostProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicJournalPost__RenderFunc(props: {
  variants: PlasmicJournalPost__VariantsArgs;
  args: PlasmicJournalPost__ArgsType;
  overrides: PlasmicJournalPost__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "fba1c2b1-76a2-477a-807f-28a64624a419",
        userArgs: {
          filters: [$ctx.params.slug]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.fba1c2b1-76a2-477a-807f-28a64624a419.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    post2: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "e9dad4a9-9e18-4392-abbf-6a5bfa6921b8",
        userArgs: {
          filters: [
            $queries.query.data[0]["Author Name"],
            $queries.query.data[0].slug
          ]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.e9dad4a9-9e18-4392-abbf-6a5bfa6921b8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    authorinfo: usePlasmicDataOp(() => {
      return {
        sourceId: "8ePA6ZChMTTHShz67XBagq",
        opId: "a9d40df5-4b8f-4a06-8a52-f19cedfa4f3c",
        userArgs: {
          filters: [$queries.query.data[0]["Team Members"][0]]
        },
        cacheKey: `plasmic.$.a9d40df5-4b8f-4a06-8a52-f19cedfa4f3c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.articles.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                data-plasmic-name={"article"}
                data-plasmic-override={overrides.article}
                className={classNames(projectcss.all, sty.article)}
                key={currentIndex}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return "/" + currentItem.slug;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
              >
                <div
                  data-plasmic-name={"rectangle38928"}
                  data-plasmic-override={overrides.rectangle38928}
                  className={classNames(projectcss.all, sty.rectangle38928)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gOpj
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.query.data[0].Title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "By: Aidan Dunn";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iDvhr
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const date = new Date(currentItem.Date);
                            const options = {
                              day: "2-digit",
                              month: "short",
                              year: "numeric"
                            };
                            return date.toLocaleDateString("en-US", options);
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "10 Nov 2023";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    data-plasmic-name={"rectangle38952"}
                    data-plasmic-override={overrides.rectangle38952}
                    className={classNames(projectcss.all, sty.rectangle38952)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qo09E
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.Title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Mr.Dr. drops new single \u201cSouth\nOakland\u201d";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hxR3R
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const postBody = currentItem["Post Body"];
                            if (postBody.length <= 200) {
                              return postBody;
                            } else {
                              return postBody.slice(0, 200) + "...";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 'Pittsburgh\'s most enigmatic and eclectic musical collective, "Mr. Dr.," has dropped a scorching new single, "South O," that\'s setting the Steel City\'s music scene on fire. This explosive track is destined to become an instant classic...';
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
            );
          })}
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <JournalPost2
              className={classNames("__wab_instance", sty.journalPost2___4IyZr)}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yJqg1
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const date = new Date($queries.query.data[0].Date);
                          const options = {
                            year: "numeric",
                            month: "short",
                            day: "numeric"
                          };
                          return date.toLocaleDateString("en-US", options);
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "10 Nov 2023";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              slot2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cA6MH
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.query.data[0].Title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "POST GENRE";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              slot3={
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0]["Post Body"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
              slot4={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__ivAda)}
                  displayHeight={"349px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $queries.query.data[0].Picture[0].url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j7W7
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return (
                                "../team/" + $queries.authorinfo.data[0].slug
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "By: " + $queries.authorinfo.data[0].Name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "POST GENRE ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </JournalPost2>
            <div
              data-plasmic-name={"about"}
              data-plasmic-override={overrides.about}
              className={classNames(projectcss.all, sty.about)}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return (
                              "../team/" + $queries.authorinfo.data[0].slug
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wg5Fx
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.authorinfo.data[0].Name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "ABOUT";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={
                  "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow"
                }
                data-plasmic-override={
                  overrides.askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow
                }
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.authorinfo.data[0].About;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 'Asked to define their genre, Funky Lamp usually resorts to "it\'s complicated." As a melting pot of funk rock, alternative, folk, indie, and punk, "it\'s complicated" might capture their sound better than any category could. Their contagious stage preference and memorable choruses see crowds dancing--and singing--along at every show.\n';
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"More to Read"}
            </h1>
            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              onClick={async event => {
                const $steps = {};

                $steps["goToJournalPost"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/journal/${(() => {
                          try {
                            return $queries.post2.data[0].slug;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToJournalPost"] != null &&
                  typeof $steps["goToJournalPost"] === "object" &&
                  typeof $steps["goToJournalPost"].then === "function"
                ) {
                  $steps["goToJournalPost"] = await $steps["goToJournalPost"];
                }
              }}
              platform={"nextjs"}
            >
              <JournalPost2
                className={classNames(
                  "__wab_instance",
                  sty.journalPost2__wtbmv
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rqO4L
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const date = new Date($queries.post2.data[0].Date);
                            const options = {
                              year: "numeric",
                              month: "short",
                              day: "numeric"
                            };
                            return date.toLocaleDateString("en-US", options);
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "10 Nov 2023";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                }
                slot2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2PDf
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.post2.data[0].Title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "POST GENRE";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                }
                slot3={
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.post2.data[0]["Post Body"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE POST GENRE ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                }
                slot4={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__s4YJw)}
                    displayHeight={"349px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return $queries.post2.data[0].Picture[0].url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mItSv
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "By: " + $queries.authorinfo.data[0].Name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "POST GENRE ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </JournalPost2>
            </p.PlasmicLink>
          </section>
          <Footer2
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            className={classNames("__wab_instance", sty.footer2)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "article",
    "rectangle38928",
    "rectangle38952",
    "navBar",
    "section",
    "about",
    "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow",
    "h1",
    "link",
    "footer2"
  ],
  article: ["article", "rectangle38928", "rectangle38952"],
  rectangle38928: ["rectangle38928", "rectangle38952"],
  rectangle38952: ["rectangle38952"],
  navBar: ["navBar"],
  section: [
    "section",
    "about",
    "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow",
    "h1",
    "link"
  ],
  about: [
    "about",
    "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow"
  ],
  askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow:
    [
      "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow"
    ],
  h1: ["h1"],
  link: ["link"],
  footer2: ["footer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  article: "div";
  rectangle38928: "div";
  rectangle38952: "div";
  navBar: typeof NavBar;
  section: "section";
  about: "div";
  askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow: "div";
  h1: "h1";
  link: "a";
  footer2: typeof Footer2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicJournalPost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicJournalPost__VariantsArgs;
    args?: PlasmicJournalPost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicJournalPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicJournalPost__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicJournalPost__ArgProps,
          internalVariantPropNames: PlasmicJournalPost__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicJournalPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicJournalPost";
  } else {
    func.displayName = `PlasmicJournalPost.${nodeName}`;
  }
  return func;
}

export const PlasmicJournalPost = Object.assign(
  // Top-level PlasmicJournalPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    article: makeNodeComponent("article"),
    rectangle38928: makeNodeComponent("rectangle38928"),
    rectangle38952: makeNodeComponent("rectangle38952"),
    navBar: makeNodeComponent("navBar"),
    section: makeNodeComponent("section"),
    about: makeNodeComponent("about"),
    askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow:
      makeNodeComponent(
        "askedToDefineTheirGenreFunkyLampUsuallyResortsToItsComplicatedAsAMeltingPotOfFunkRockAlternativeFolkIndieAndPunkItsComplicatedMightCaptureTheirSoundBetterThanAnyCategoryCouldTheirContagiousStagePreferenceAndMemorableChorusesSeeCrowdsDancingAndSingingAlongAtEveryShow"
      ),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    footer2: makeNodeComponent("footer2"),

    // Metadata about props expected for PlasmicJournalPost
    internalVariantProps: PlasmicJournalPost__VariantProps,
    internalArgProps: PlasmicJournalPost__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicJournalPost;
/* prettier-ignore-end */
